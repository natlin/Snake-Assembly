;Authors Nathan Lin, Matthew Yap

	.EQU KBD_CNTL, $000
	.EQU KBD_STAT, $000
	.EQU KBD_DATA, $001
	.EQU KBD_FLUSH, $40
	.EQU TIM_CNTL, $030
	.EQU TIM_STAT, $030
	.EQU TIM_RELOAD, $031
	.EQU TIM_COUNT, $034
         
	.EQU INTERRUPT_ENA, $80
	.EQU RESET_READY_BIT, $40
	.EQU START_AFTER_LOAD, $10
	.EQU ENABLE_RESET_AND_START, $D0
	.EQU ENABLE_AND_RESET, $C0

	.EQU CRT_BUFFER, $100
	.EQU BOTTOM_RIGHT, $313
	.EQU CRT_XREG, $314
	.EQU CRT_YREG, $315
	.EQU CRT_CNTL, $316
	.EQU CRT_DATA, $317
	.EQU CRT_ROWS, $0E
	.EQU CRT_COLS, $26
	.EQU CLEAR_DISPLAY, $01
	.EQU HOME, $04

	.EQU PUT_NUM, $E00      ; MINI_OS JSRS
	.EQU GET_NUM, $E01
	.EQU PUT_STR, $E05
	.EQU PUT_NL, $E06
	.EQU PUT_NUM2, $E07
	.EQU PUT_CHR, $E08

	.EQU TOP, 0
	.EQU BOTTOM, 13
	.EQU MAX_RIGHT, 37
	.EQU MIN_RIGHT, 1
	.EQU DOWN, 2
	.EQU UP, 3
	.EQU LEFT, 4
	.EQU RIGHT, 5
	.EQU MAX, 33
	.EQU Q_SIZE, 600
	.EQU PLAY_DELAY, 2500
	.EQU SCORE_DELAY, 50000
	.EQU COUNTDOWN_DELAY, 10000

        ;putchar test

	;PSH# 0
	;PSH# 0
	;PSH# 'A'
	;JSR putChar
	;ADS# 3
	;HLT

MAIN:	LDS# $e00
	;PSH# SPEEDPROMPT_LEN
	;PSH# SPEEDPROMPT
	;JSR PUT_STR
	;ADS# 2
	;JSR GET_NUM
	;MUL# 5000
	;STA SPEED
	PSH# SEEDPROMPT_LEN
	PSH# SEEDPROMPT
	JSR PUT_STR
	ADS# 2
	JSR GET_NUM
	STA SEED
	;PSH SEED
	;JSR RANDOM	;Puts seed in srand, a C++ function. write our own srand?
	;ADS# 1
	JSR SHOWINTRO	;explains options and clears screen
	lda# clear_display
	outb crt_cntl
	psh score
	psh lives
	jsr showScore
	ADS# 2
	HLT
	;LDA SCORE_DELAY	;Score_Delay is too large to fit in ACC with an opcode?
	;outw Tim_Reload
	;LDA# keyISR
	;STA $FF8
	;LDA# Enable_and_reset
	;OUTB kbd_cntl
	;LDA# TimerISR
	;STA $FFB
	;LDA# Enable_reset_and_start
	;outb tim_cntl
	;SIE
;MainLOOP:	NOP
;	JMP MainLOOP


advanceTime:

getKey:

moveSnake:

	.EQU	putCharX, 5
	.EQU	putCharY, 4
	.EQU	putCharC, 3
	.EQU	putCharTemp, 0

putChar:	bgn#	1
	psha
	lda !	putCharY
	mul#	38
	ada !	putCharX
	ada#	CRT_BUFFER
	sta !	putCharTemp
	lda !	putCharC
	outb* !putCharTemp
	popa
	fin#	1
	rtn


random2:

showIntro:	BGN# 0
	psha
	lda# clear_display
	outb crt_cntl	; clear display
	psh# intro1len
	psh# intro1
	jsr put_str
	ads# 2
showIntro1:	inb KBD_Stat
	cma# $80	;ready bit set?
	JLT showIntro1
	inb KBD_Data
	cma# '\CR'
	JNE showIntro1
	popa
	FIN# 0
	;write interrupt to read a key to clear screen and go to countdown
	RTN


	.equ score1, 3
	.equ lives1, 2

showScore:	BGN# 0
		psha
		lda ! lives1
		cma# 0
		JEQ GameOver
		cma# 3
		JEQ showScoreTest
		JMP ShowScoreText
showScoretest:		lda ! score1
		cma# 0
		JEQ showScoreEnd

showScoreText:	lda# 15
		outb crt_xreg
		lda# 1
		outb crt_yreg
		psh# ScoreText_Len
		psh# ScoreText
		JSR Put_Str
		ads# 2
		LDA Score
		JSR PUT_NUM
		lda# 15
		outb crt_xreg
		lda# 2
		outb crt_yreg
		psh# LivesText_Len
		psh# LivesText
		JSR Put_str
		ADS# 2
		LDA Lives
		JSR PUT_NUM

showScoreEnd:	popa
		FIN# 0
		rtn

GameOver:	psh# Gameov_Len
	psh# Gameov
	JSR Put_str
	ads# 2
	JMP showScoreEnd

startNewScreen:

startSnake:


;char stuff?
INTRO1:	.CHAR 'SNAKE: (ASCII art?) \CR\LF OPTIONS:\CR\LF Head is diff character (5pt)\CR\LF Space Bar pauses (5pt)\CR\LF Increase/Decrease Speed\CR\LF of Snake Button (5pt)\CR\LFSpeed based on duration (5pt)\CR\LF Horizontal Wrap-around(5pt)\CR\LF Choose Characters of Snake(5pt)\CR\LF High Score (5pt)\CR\LF Save and Load game (5pt)\CR\LF Press Enter to Continue...', INTRO1LEN
SPEEDPROMPT:	.CHAR 'Speed for demo (1 = fast, 9 = slow)', SPEEDPROMPT_LEN
SEEDPROMPT:	.CHAR 'Seed', SEEDPROMPT_LEN
SPEED:	.word
SEED:	.word
Gameov:	.CHAR '          Game Over', Gameov_Len
QUIT:	.CHAR 'x', QUITLEN
;NOKKEY: .CHAR '\n', NOKKEYLEN
BODY:	.CHAR 'O', BODYLEN
NO_BODY:	.CHAR ' ', NO_BODYLEN
FOOD:	.CHAR 'F', FOODLEN
Score:	.word 0
ScoreText:	.char 'Score: ', ScoreText_Len
lives:	.word 3
LivesText:	.char 'Lives: ', LivesText_Len
direction:	.word
delay:	.word
head:	.word
tail:	.word
Q:	.blkw Q_SIZE, 0