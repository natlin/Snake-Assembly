;Authors Nathan Lin, Matthew Yap

	.EQU KBD_CNTL, $000
	.EQU KBD_STAT, $000
	.EQU KBD_DATA, $001
	.EQU KBD_FLUSH, $40
	.EQU TIM_CNTL, $030
	.EQU TIM_STAT, $030
	.EQU TIM_RELOAD, $031
	.EQU TIM_COUNT, $034
         
	.EQU INTERRUPT_ENA, $80
	.EQU RESET_READY_BIT, $40
	.EQU START_AFTER_LOAD, $10
	.EQU ENABLE_RESET_AND_START, $D0
	.EQU ENABLE_AND_RESET, $C0

	.EQU CRT_BUFFER, $100
	.EQU BOTTOM_RIGHT, $313
	.EQU CRT_XREG, $314
	.EQU CRT_YREG, $315
	.EQU CRT_CNTL, $316
	.EQU CRT_DATA, $317
	.EQU CRT_ROWS, $0E
	.EQU CRT_COLS, $26
	.EQU CLEAR_DISPLAY, $01
	.EQU HOME, $04

	.EQU PUT_NUM, $E00      ; MINI_OS JSRS
	.EQU GET_NUM, $E01
	.EQU PUT_STR, $E05
	.EQU PUT_NL, $E06
	.EQU PUT_NUM2, $E07
	.EQU PUT_CHR, $E08
	.EQU GET_STR, $E04

	.EQU TOP, 0
	.EQU BOTTOM, 13
	.EQU MAX_RIGHT, 37
	.EQU MIN_RIGHT, 1
	.EQU DOWN, 2
	.EQU UP, 3
	.EQU LEFT, 4
	.EQU RIGHT, 5
	.EQU MAX, 33
	.EQU Q_SIZE, 600
	.EQU PLAY_DELAY, 1500
	.EQU SCORE_DELAY, 25000
	.EQU COUNTDOWN_DELAY, 5000

        ;putchar test

	;PSH# 0
	;PSH# 0
	;PSH# 'A'
	;JSR putChar
	;ADS# 3
	;HLT

MAIN:	LDS# $e00
	;PSH# SPEEDPROMPT_LEN
	;PSH# SPEEDPROMPT
	;JSR PUT_STR
	;ADS# 2
	;JSR GET_NUM
	;MUL# 5000
	;STA SPEED
	PSH# SEEDPROMPT_LEN
	PSH# SEEDPROMPT
	JSR PUT_STR
	ADS# 2
	JSR GET_NUM
	STA SEED
	;PSH SEED
	;JSR RANDOM	;Puts seed in srand, a C++ function. write our own srand?
	;ADS# 1
	JSR SHOWINTRO	;explains options and clears screen
	lda# clear_display
	outb crt_cntl
	PSH# BODYPROMPT_LEN
	PSH# BODYPROMPT
	JSR PUT_STR
	ADS# 2
	JSR GET_NUM
	STA BODY
	SBA# 32
	STA HEADCHAR
	lda# clear_display
	outb crt_cntl
	LDA# 0
	outb CRT_xreg
	outb CRT_yreg
	psh lives
	psh score
	jsr showScore
	ADS# 2
	LDA# keyISR
	STA $FF8
	LDA# Enable_and_reset
	OUTB kbd_cntl
	LDA COUNTDOWNTIME
	outw Tim_Reload
	LDA# TimerISR
	STA $FFB
	LDA# Enable_reset_and_start
	outb tim_cntl
	SIE
MainLOOP:	NOP
	JMP MainLOOP
;MainLOOPEnd:	HLT

	.equ COUNTTIME, 0
COUNTDOWN:	BGN# 1
	LDA# 3
	STA ! COUNTTIME
	LDA# ENABLE_RESET_AND_START
	OUTB TIM_CNTL
COUNTDOWN1:	INB TIM_STAT
	JGE COUNTDOWN1
	LDA# RESET_READY_BIT
	
	OUTB TIM_CNTL
	LDA# CLEAR_DISPLAY
	OUTB CRT_CNTL
	;LDA# 19
	;outb crt_xreg
	;LDA# 1
	;outb CRT_yreg
	LDA ! COUNTTIME
	ada# '0'
	outb $113
	SBA# '0'
	SBA# 1
	CMA# 0
	JLT COUNTDOWNDONE
	STA ! COUNTTIME
	LDA# 0
	outb CRT_xreg
	outb CRT_yreg
	JMP COUNTDOWN1
COUNTDOWNDONE:	LDA# 0
	outb CRT_xreg
	outb CRT_yreg
	LDA# 2
	STA STAGE
	FIN# 1
	RTN

;advanceTime:

keyISR:	PSHA
	;lda#	0
	;outb	KBD_CNTL
	INB 	KBD_DATA
	CMA# ' '
	JEQ	PAUSE
	CMA#	'x'
	JNE	KEY1
	HLT		;HALT if X

PAUSE:;	lda# 17
	lda# $20
	outb tim_cntl
;	outb crt_xreg
;	lda# 7
;	outb crt_yreg
;	PSH# PAUSE_LEN
;	PSH# PAUSETEXT
;	JSR PUT_STR
;	ADS# 2;display pause screen text
;	lda# 0
;	outb crt_xreg
;	lda# 0
;	outb crt_yreg
PAUSE2:	inb KBD_Stat
	cma# $80
	JLT PAUSE2
	inb KBD_Data
	cma# ' '
	JNE PAUSE
	lda# $F0
	outb tim_cntl;return to game

KEY1:	cma# $1B
	JNE KeyDone
	inb kbd_data
	cma# $48
	JNE key2
	lda# UP
	jmp rightKey
KEY2:	cma# $50
	jne Key3
	lda# Down
	JMP rightKEY
KEY3:	cma# $4B;
	JNE KEY4
	LDA# left
	JMP RIGHTKEY
KEY4:	cma# $4D
	JNE KEYDone
	lda# right
	JMP RIGHTKEY
RIGHTKey:	STA direction
KEYDone:	;lda# Interrupt_ENA
	;outb KBD_CNTL
	POPA
	IRTN

;getKey:
	.equ direct, 13
	.equ scoresCnt, 12
	.equ livesCnt, 11
	.equ seedNum, 10
	.equ snake, 9
	.equ headptr, 8
	.equ tailptr, 7
	.equ newloc, 4
	.equ getcharTMP, 3
	.equ newx, 2
	.equ newy, 1
	.equ OKK, 0


moveSnake:	BGN# 5
	psha
	pshx
	ldx* ! headPtr
	lda& ! snake
	STA ! getcharTMP
	STA ! newloc
	lda ! direct
	CMA# UP
	JEQ mvSnakeU
	CMA# DOWN
	JEQ mvSnakeD
	CMA# LEFT
	JEQ mvSnakeL
	CMA# RIGHT
	JEQ mvSnakeR
	JMP mvSnakeEnd
	
mvSnakeU:	lda ! newloc
	SBA# 38
	STA ! newloc
	CMA# 0
	JLT mvSnakeUT
	LDA# 1
	STA ! OKK
	JMP mvSnakeCont
mvSnakeUT:	LDA# 0
	STA ! OKK
	JMP mvSnakeCont

mvSnakeD:	lda ! newloc
	ADA# 38
	STA ! newloc
	CMA# 531
	JGT mvSnakeUT
	LDA# 1
	STA ! OKK
	JMP mvSnakeCont

mvSnakeL:	lda ! newloc
	SBA# 1
	STA ! newloc
	MOD# 38
	CMA# 0
	JEQ mvSnakeUT
	LDA# 1
	STA ! OKK
	JMP mvSnakeCont
mvSnakeR:	lda ! newloc
	ADA# 1
	STA ! newloc
	MOD# 38
	CMA# 37
	JEQ mvSnakeUT
	LDA# 1
	STA ! OKK
	JMP mvSnakeCont
mvSnakeCont:	LDA ! OKK
	CMA# 1
	JEQ mvSnakeIf
	DEC* ! livesCNT
	LDA# 4
	STA STAGE
	JMP mvSnakeEnd ;Decrease Lives, stop timer, go to show score
mvSnakeIf:	LDA ! newloc
	MOD# 38
	STA ! newx
	LDA ! newloc
	DIV# 38
	STA ! newy
	MUL# 38
	ADA ! newx
	ada# CRT_BUFFER
	;sta ! getcharTMP
	;inb* ! getcharTMP
;	pshX
	TAX
	inb+ $0
	;popx
	cma BODY
	JEQ mvSnakeUT
	JMP mvSnakeFoodTest
Foodreturn:	PSH ! newx
	PSH ! newy
	PSH HEADCHAR
	JSR putChar
	ADS# 3
	LDA ! getcharTMP
	MOD# 38
	STA ! newx
	LDA ! getcharTMP
	DIV# 38
	STA ! newy
	PSH ! newx
	PSH ! newy
	PSH BODY
	JSR putCHAR
	ADS#3
;	LDA Body
;	outb getcharTMP
	lda* ! headPtr
	ADA# 1
	STA* ! headPtr
	CMA Q_SIZE
	JGE resetHead
mvSnakeIfRet:	lda ! newloc
	ldx* ! headPtr
	STA& ! snake
	LDA ! OKK
	CMA# 1
	JEQ newFOOD
	ldx* ! tailPtr
	lda& ! snake
	mod# 38
	sta ! newx
	lda& ! snake
	div# 38
	sta ! newy
	PSH ! newx
	PSH ! newy
	PSH# ' '
	JSR PUTCHAR
	ADS# 3
	lda* ! tailPtr
	ADA# 1
	STA* ! tailPtr
	CMA Q_SIZE
	JGE resetTAIL


mvSnakeEnd:	popx
	popa
	FIN# 5
	RTN
FOODFLAG:	LDA# 1
	STA ! OKK
	JMP FOodRETURN
NOFOODFLAG:	LDA# 0
	STA ! OKK
	JMP FOODRETURN

mvSnakeFoodTest:	CMA# 'F'
	JEQ FOODFLAG
	JMP NOFOODFLAG
newFOOD:	INC* ! scoresCNT
	JSR putFOOD
	JMP mvSnakeEnd

resetTAIL:	LDA# 0
	STA* ! TailPTR
	JMP mvSnakeEnd

resetHead:	LDA# 0
	STA* ! headPtr
	JMP mvSnakeIfRET


	.EQU	putCharX, 5
	.EQU	putCharY, 4
	.EQU	putCharC, 3
	.EQU	putCharTemp, 0

putChar:	bgn#	1
	psha
	lda !	putCharY
	mul#	38
	ada !	putCharX
	ada#	CRT_BUFFER
	sta !	putCharTemp
	lda !	putCharC
	outb* !putCharTemp
	lda# 0
	outb crt_xreg
	lda# 0
	outb crt_yreg
	popa
	fin#	1
	rtn

TimerISR:	PSHA
	PSHX
	LDA STAGE
	CMA# 1
	JEQ TimCNTDWN
	CMA# 2
	JEQ TimStartSnake
	CMA# 3
	JEQ TimMOVE
	CMA# 4
	JEQ TimScore
	JMP TimDone
TimCNTDWN:	LDA COUNTDOWNTIME
	outw Tim_Reload
	JSR COUNTDOWN
	JMP TimDone
;	LDA CDCOUNT
;	CMA# neg_one
;	JNE COUNTDOWNTXT
;	JMP STARTSNAKE
TimScore:	LDA ScoreDelay
	outw Tim_Reload
	PSH Lives
	PSH Score
	JSR ShowScore
	ADS# 2
	JMP TimDone
;COUNTDOWNTXT:	ada# '0'
;	outb $113
;	dec CDCOUNT
;TimLoop3:	INB Tim_Stat
;	JGE TimLoop3
;	lda# Reset_Ready_Bit
;	OUTB Tim_Cntl
;	PSH# 19
;	PSH# 0
;	PSH# '3'
;	JSR putchar
;	ads# 3
;	JMP TimLoop2
;TimLoop2:
TimStartSnake:	JSR StartSnake
	LDA# 3
	STA STAGE
	JMP TimDone
;TimLoop1:
;TimLoop0:
TIMMove:	psh direction	; pushes direction
	psh# score
	psh# lives
	psh# seed
	psh# Q
	psh# head
	psh# tail
	JSR moveSnake
	ads# 7

TimDone:	LDA# Enable_reset_and_start
	OUTB TIM_CNTL
	POPX
	POPA
	IRTN


	.equ seedVal, 3
	.equ maxVal, 2
random2:	BGN# 0
	lda* ! seedVal
	MUL# 2789
	ADA# 1997
	MOD# 2048
	STA* !seedVal
	INC ! maxVal
	MOD ! maxVal
	
	FIN# 0
	RTN	; random number is stored in ACC to return

showIntro:	BGN# 0
	psha
	lda# clear_display
	outb crt_cntl	; clear display
	psh# intro1len
	psh# intro1
	jsr put_str
	ads# 2
	LDA# 0
	outb CRT_xreg
	outb CRT_yreg
showIntro1:	inb KBD_Stat
	cma# $80	;ready bit set?
	JLT showIntro1
	inb KBD_Data
	cma# '\CR'
	JNE showIntro1
	popa
	FIN# 0
	;write interrupt to read a key to clear screen and go to countdown
	RTN

	.equ lives1, 3
	.equ score1, 2

showScore:	BGN# 0
		psha
		lda ! lives1
		cma# 0
		JEQ GameOver
		cma# 3
		JEQ showScoreTest
		JMP ShowScoreText
showScoretest:		lda ! score1
		cma# 0
		JEQ showScoreEnd

showScoreText:	lda# 15
		outb crt_xreg
		lda# 1
		outb crt_yreg
		psh# ScoreText_Len
		psh# ScoreText
		JSR Put_Str
		ads# 2
		LDA Score
		JSR PUT_NUM
		lda# 15
		outb crt_xreg
		lda# 2
		outb crt_yreg
		psh# LivesText_Len
		psh# LivesText
		JSR Put_str
		ADS# 2
		LDA Lives
		JSR PUT_NUM

showScoreEnd:	;JSR COUNTDOWN
	;LDA# 3
	;STA CDCOUNT
	lda# 0
	outb crt_yreg
	LDA# 1
	STA STAGE
	popa
		FIN# 0
		rtn

GameOver:	lda# 15
		outb crt_xreg
		lda# 1
		outb crt_yreg
		psh# ScoreText_Len
		psh# ScoreText
		JSR Put_Str
		ads# 2
		LDA ! Score1
		JSR PUT_NUM
		lda# 15
		outb crt_xreg
		lda# 2
		outb crt_yreg
		psh# LivesText_Len
		psh# LivesText
		JSR Put_str
		ADS# 2
		LDA ! Lives1
		JSR PUT_NUM
	lda# 3
	outb crt_yreg
	psh# Gameov_Len
	psh# Gameov
	JSR Put_str
	ads# 2
	lda# 0
	outb crt_yreg
	HLT
	JMP showScoreEnd

;startNewScreen:
;	.equ xx, 4
;	.equ yy, 3
;	.equ cc, 2
;PUTCHAR2:	BGN# 0
;	LDA ! xx
;	outb crt_xreg
;	LDA ! yy
;	outb crt_yreg
;	LDA ! cc
;	outb CRT_DATA
;	LDA# 0
;	outb crt_xreg
;	outb crt_yreg
;	FIN# 0
;	RTN


	.equ y2temp, 5
	.equ x2temp, 4
	.equ loc, 3
	.equ itemp, 2
	.equ xtemp, 1
	.equ ytemp, 0

startSnake:	BGN# 6
	LDA# Play_Delay
	outw tim_reload
	;LDA# 10
	;JSR PUT_NUM
	LDA# CLEAR_DISPLAY
	outb CRT_CNTL
	PSH# seed
	lda# 28
	PSHa
	JSR random2
	ADS# 2
	ADA# 5
	STA ! xtemp
	PSH# seed
	lda# 4
	PSha
	JSR random2
	ADS# 2
	ADA# 5
	STA ! ytemp
	MUL# 38
	ADA ! xtemp
	STA ! loc
	psh ! xtemp
	psh ! ytemp
	psh HEADCHAR
	JSR PUTCHAR
	ADS# 3
	LDA# 3
	STA HEAD
	LDA# 0
	STA TAIL
	LDA ! loc
	LDX# 3
	STA+ Q
	LDX# 2
startsnakeLoop:	LDA Direction
	CMA# UP
	JEQ startsnakeU
	CMA# Down
	JEQ startsnakeD
	CMA# LEFT
	JEQ StartSnakeL
	CMA# Right
	JEQ StartSnakeR
	JMP putsnake
startsnakeU:	ADX# 1
	LDA+ Q
	SBX# 1
	ADA# 38
	STA+ Q
	JMP putsnake
StartSnakeD:	ADX# 1
	LDA+ Q
	SBX# 1
	SBA# 38
	STA+ Q
	JMP putsnake
STARTSNAKEL:	ADX# 1
	LDA+ Q
	SBX# 1
	ADA# 1
	STA+ Q
	JMP PUTSNAKE
STARTSNAKER:	ADX# 1
	LDA+ Q
	SBX# 1
	SBA# 1
	STA+ Q
	JMP PUTSNAKE
PUTSNAKE:	LDA+ Q
	MOD 38
	PSHA
	LDA+ Q
	DIV 38
	PSHA
	PSH BODY
	JSR PUTCHAR
	ADS# 3
	SOJ StartSnakeLoop
	LDX# 0
StartFood:	JSR putFOOD
	AOC# 4
	JLE StartFood
	JMP StartSnakeDone

putFood:	BGN# 0
	psha
	pshx
putFood2:	PSH# SEED
	psh# 532
	JSR random2
	ADS# 2
	TAX
	inb+ CRT_BUFFER
	cma# ' '
	jeq subputfood
	jmp putFood2
;putFoodX:	lda# 37
;	PSH Seed
;	Psha
;	JSR random2
;	ADS# 2
;	STA ! x2temp
;	SBA ! xtemp
;	CMA# 0
;	JLT negX	
;putFoodX2:	CMA# 5
;	JLT putFoodX
;putFoodY:	lda# 12
;	PSH Seed
;	Psha
;	JSR random2
;	ADS# 2
;	STA ! y2temp
;	SBA ! ytemp
;	CMA# 0
;	JLT negy
;putFoodY2:	CMA# 5
;	JLT PutFoodY

;putFoodIf:	;LDA ! x2temp
	;outb crt_xreg
	;LDA ! y2temp
	;outb crt_yreg
;	LDA ! y2temp
;	MUL# 38
;	ADA# x2temp
;	ADA# crt_BUFFER
;	STA ! x2temp
;	inb x2temp
;	CMA# ' '
;	JEQ subputfood
;	CMX# 5
;	JLE putFOOD
;	JMP startSnakeDone
subputfood:	LDA FOOD
	outb+ CRT_BUFFER
	popx
	popa
	fin# 0
	rtn



startSnakeDone:
	FIN# 6
	RTN
	HLT


;NEGATION:	BGN# 0
;	NEGA
;	FIN# 0
;	RTN

;negX:	JSR NEGATION
;	JMP putFoodX2
;negY:	JSR NEGATION
;	JMP putFoodY2


;char stuff?
INTRO1:	.CHAR 'SNAKE: (ASCII art?) \CR\LF OPTIONS:\Cr\LF User Chooses Characters of Snake(5pt) Head is a Different Character(5pt)\CR\LF Space Bar pauses (5pt)\CR\LF\CR\LF Increase/Decrease Speed\CR\LF of Snake Button (5pt)\CR\LFSpeed based on duration(5pt)\CR\LF Horizontal Wrap-around(5pt)\CR\LF High Score(5pt)\CR\LF Save and Load game(5pt)\CR\LF Press Enter to Continue...', INTRO1LEN
SPEEDPROMPT:	.CHAR 'Speed for demo (1 = fast, 9 = slow)', SPEEDPROMPT_LEN
SEEDPROMPT:	.CHAR 'Seed', SEEDPROMPT_LEN
SPEED:	.word
SEED:	.word
Gameov:	.CHAR '              Game Over', Gameov_Len
;COUNTTIME:	.word
QUIT:	.CHAR 'x', QUITLEN
PAUSETEXT:	.CHAR 'Paused', PAUSE_LEN
;NOKKEY: .CHAR '\n', NOKKEYLEN
KBD_Val:	.word	;direction of snake/other keyboard interrupt values
ScoreDelay:	.word SCORE_DELAY
;BODY:	.CHAR 'O', BODYLEN
BODYPROMPT:	.CHAR '   a:97     b:98     c:99     d:100\Cr\LF   e:101    f:N/A    g:103    h:104\Cr\LF   i:105    j:106    k:107    l:108\Cr\LF   m:109    n:110    o:111    p:112\CR\LF   q:113    r:114    s:115    t:116\Cr\LF   u:117    v:118    w:119    x:120\Cr\LF   y:121    z:122\Cr\LF\Cr\LFInput ASCII Value in Decimal\CR\LFFor Snake Body(except 102)', BodyPrompt_Len
BODY:	.word 'O'
HEADCHAR:	.word 'O'
NO_BODY:	.CHAR ' ', NO_BODYLEN
FOOD:	.word 'F'
;snake:	.blkw, Q_SIZE
COUNTDOWNTIME:	.word Countdown_Delay
CDCOUNT:	.word
Score:	.word 0
ScoreText:	.char 'Score: ', ScoreText_Len
lives:	.word 3
LivesText:	.char 'Lives: ', LivesText_Len
direction:	.word 4
delay:	.word
head:	.word
STAGE:	.word; 1 = countdown, 2 = CD Done, 3 = gameplay,
tail:	.word
Q:	.blkw Q_SIZE
neg_one:	.word -1