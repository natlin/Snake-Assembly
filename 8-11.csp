;Authors Nathan Lin, Matthew Yap

	.EQU TDR_CNTL, $020
	.EQU TDR_STAT, $020
	.EQU TDR_LEN, $021
	.EQU TDR_ADDR, $022

	.EQU READ_BITS, $10
	.EQU MOUNTED_BIT, $20
	.EQU EOT_BIT, $08

	.EQU CRT_CNTL, $316
	.EQU CRT_DATA, $317

	.EQU NEXT_LINE_VALUE, $0D

	LDS# $E00

MAIN:	INB TDR_STAT	; CHECK FOR TAPE DRIVE READY
	JGE STOP
	LDA# BUFFER	; LOAD TRANSFER ADDRESS
	OUTW TDR_ADDR
NEXT_REC:	LDA# B_SIZE	; LOAD TRANSFER LENGTH
	OUTB TDR_LEN
	LDA# READ_BITS	; INITIATE READ
	OUTB TDR_CNTL
POLL:	INB TDR_STAT	; WAIT FOR OPERATION COMPLETE
	JLT COMPLETE
	AND# MOUNTED_BIT	; CHECK THAT TAPE STILL MOUNTED
	JEQ STOP	; IF NOT, AN ERROR HAS OCCURRED
	JMP POLL
COMPLETE:	AND# EOT_BIT	; CHECK FOR END OF TAPE
	JNE STOP
	INB TDR_LEN	; GET TRANSFER LENGTH
	JEQ NEW_LINE	; IF ZERO, SKIP DATA OUTPUT
	STA COUNT	; INITIALIZE COUNTER COUNT
	LDX# 0
;COPY_CHAR:	LDC BUFFER	; GET CHARACTER
;	OUTB CRT_DATA	; COPY TO SCREEN
;	AOC COUNT	; LOOP BACK IF NOT DONE
;	JLT COPY_CHAR

;	.EQU CHAR, 2	;FORMAL PARAMETER
	.EQU PRT_STAT, $010
	.EQU PRT_DATA, $011
	.EQU ON_LINE_BIT, $020

;PRINT:	BGN# 0	; INIT. CALL
LOOP:	INB PRT_STAT	; GET PRINTER STATUS
	JLT READY	; IF PRINTER IS READY, PRINT CHAR.
	AND# ON_LINE_BIT
	JNE LOOP
OFF_LINE:	LDA# 1	; ACC = 1 TO INDICATE FAILURE
	JMP NEW_LINE
READY:	LDC BUFFER	; GET CHARACTER AND
	OUTB PRT_DATA	; PRINT IT
	AOC COUNT
	JLT LOOP
	LDA# 0	; ACC = 0 TO INDICATE SUCCESS
	JMP NEW_LINE
;DONE:	FIN# 0	; CLOSE CALL
;	RTN

NEW_LINE:	
LOOP2:	INB PRT_STAT
	JLT NEW_LINE2
	AND# ON_LINE_BIT
	JNE LOOP2
NEW_LINE2:	LDA# NEXT_LINE_VALUE	; MOVE CURSOR TO NEXT LINE
	OUTB PRT_DATA
	JMP NEXT_REC
	jeq $E0
STOP:	HLT

	.EQU B_SIZE, 30	; MAX CHARACTERS PER RECORD
BUFFER:	.BLKW (B_SIZE+2)/3	; BUFFER LENGTH IS ROUNDED UP
COUNT:	.BLKW 1